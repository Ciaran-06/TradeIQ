{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcca TradeIQ Documentation","text":""},{"location":"#welcome-to-tradeiq-docs","title":"Welcome to TradeIQ Docs","text":"<p>Quant dashboard for research, analytics, and strategy development.</p> <ul> <li>Built in C++17</li> <li>Powered by Python, React, and Tiingo API</li> <li>Features a full analytics + stats engine, portfolio simulation, and API interfaces.</li> </ul>"},{"location":"api/","title":"API Reference","text":"<p>This section includes the autogenerated documentation from Doxygen.</p> <p>Browse the API</p>"},{"location":"stats/STATS_FUNCTIONS/","title":"StatsEngine Function Overview","text":"<p>This file documents all available statistical functions grouped by category.</p>"},{"location":"stats/STATS_FUNCTIONS/#returns","title":"\ud83d\udcc8 Returns","text":"<ul> <li><code>computeDailyReturns(series)</code> \u2013 Computes daily log or simple returns.</li> <li><code>computeTotalReturn(series)</code> \u2013 Calculates the overall return.</li> <li><code>computeAnnualizedReturn(totalReturn, numPeriods, periodsPerYear)</code> \u2013 Annualized compound growth rate.</li> </ul>"},{"location":"stats/STATS_FUNCTIONS/#risk-volatility","title":"\ud83d\udcca Risk &amp; Volatility","text":"<ul> <li><code>portfolioVariance(covMatrix, weights)</code> \u2013 Portfolio variance via matrix math.</li> <li><code>computeSharpeRatio(expectedReturn, volatility, riskFreeRate)</code></li> <li><code>computeSortinoRatio(expectedReturn, riskFreeRate, returns)</code></li> <li><code>computeRollingVolatility(returns, window)</code></li> <li><code>computeAnnualizedVolatility(returns, periodsPerYear)</code></li> </ul>"},{"location":"stats/STATS_FUNCTIONS/#drawdowns","title":"\ud83d\udcc9 Drawdowns","text":"<ul> <li><code>computeMaxDrawdown(cumulativeReturns)</code></li> <li><code>computeAverageDrawdown(cumulativeReturns)</code></li> <li><code>computeMaxRecoveryTime(cumulativeReturns)</code></li> </ul>"},{"location":"stats/STATS_FUNCTIONS/#ratios","title":"\ud83d\udcda Ratios","text":"<ul> <li><code>computeAlpha(...)</code> \u2013 Two overloads, with or without beta input.</li> <li><code>computeBeta(asset, benchmark)</code></li> <li><code>computeTreynorRatio(expectedReturn, riskFree, beta)</code></li> <li><code>computeInformationRatio(portfolioReturns, benchmarkReturns)</code></li> <li><code>computeCalmarRatio(annualReturn, maxDrawdown)</code></li> <li><code>computeSterlingRatio(avgReturn, riskFree, avgDrawdown)</code></li> <li><code>computeOmegaRatio(returns, threshold)</code></li> </ul>"},{"location":"stats/STATS_FUNCTIONS/#rolling-metrics","title":"\ud83d\udd01 Rolling Metrics","text":"<ul> <li><code>computeRollingSharpe(...)</code></li> <li><code>computeRollingSortino(...)</code></li> <li><code>computeRollingStandardDeviation(...)</code></li> </ul>"},{"location":"stats/STATS_FUNCTIONS/#distribution-metrics","title":"\ud83e\udde0 Distribution Metrics","text":"<ul> <li><code>computeSkewness(returns)</code></li> <li><code>computeKurtosis(returns)</code></li> <li><code>computeGainLossRatio(returns)</code></li> <li><code>computeHitRatio(returns)</code></li> </ul>"},{"location":"stats/STATS_FUNCTIONS/#capture-metrics","title":"\ud83d\udcc8 Capture Metrics","text":"<ul> <li><code>computeUpsideCaptureRatio(portfolio, benchmark)</code></li> <li><code>computeDownsideCaptureRatio(portfolio, benchmark)</code></li> </ul>"},{"location":"stats/STATS_FUNCTIONS/#moving-averages","title":"\ud83e\uddee Moving Averages","text":"<ul> <li><code>simpleMovingAverage(values, window)</code></li> <li><code>exponentialMovingAverage(values, window)</code></li> </ul>"},{"location":"stats/STATS_FUNCTIONS/#utilities","title":"\ud83e\uddea Utilities","text":"<ul> <li><code>exportToCSV(filename, headers, data)</code></li> </ul> <p>For detailed usage and testing, see <code>tests/stats/</code>.</p>"},{"location":"stats/STATS_OVERVIEW/","title":"\ud83d\udcca StatsEngine Function Overview","text":"<p>This document outlines all statistical and financial analysis functions available in the Stats module. Functions are grouped by category for clarity and maintainability.</p>"},{"location":"stats/STATS_OVERVIEW/#returns","title":"\ud83d\udcc8 Returns","text":"<ul> <li> <p><code>computeDailyReturns(const PriceSeries&amp;)</code>   Computes day-over-day return values for a price series.</p> </li> <li> <p><code>computeTotalReturn(const PriceSeries&amp;)</code>   Calculates the total compounded return across a full series.</p> </li> <li> <p><code>computeAnnualizedReturn(double totalReturn, int numPeriods, int periodsPerYear)</code>   Converts a total return into an annualized return using compounding.</p> </li> </ul>"},{"location":"stats/STATS_OVERVIEW/#risk-volatility","title":"\ud83d\udcca Risk &amp; Volatility","text":"<ul> <li> <p><code>portfolioVariance(const CovMatrix&amp;, const Weights&amp;)</code>   Computes variance of a portfolio using the covariance matrix and asset weights.</p> </li> <li> <p><code>computeSharpeRatio(double expectedReturn, double volatility, double riskFreeRate)</code>   Measures excess return per unit of total risk.</p> </li> <li> <p><code>computeSortinoRatio(double expectedReturn, double riskFreeRate, const Returns&amp;)</code>   Like Sharpe but penalizes only downside volatility.</p> </li> <li> <p><code>computeAnnualizedVolatility(const Returns&amp;, int periodsPerYear)</code>   Converts standard deviation to annualized volatility.</p> </li> <li> <p><code>computeRollingVolatility(const Returns&amp;, size_t window)</code>   Rolling volatility across the series using a moving window.</p> </li> <li> <p><code>computeRollingStandardDeviation(const Returns&amp;, bool sample = false)</code>   Computes rolling standard deviation; sample mode optionally enabled.</p> </li> </ul>"},{"location":"stats/STATS_OVERVIEW/#rolling-metrics","title":"\ud83d\udd01 Rolling Metrics","text":"<ul> <li> <p><code>computeRollingSharpe(const Returns&amp;, size_t window, double riskFreeRate)</code>   Computes rolling Sharpe ratio over a defined window.</p> </li> <li> <p><code>computeRollingSortino(const Returns&amp;, size_t window, double riskFreeRate)</code>   Computes rolling Sortino ratio.</p> </li> </ul>"},{"location":"stats/STATS_OVERVIEW/#drawdowns-recovery","title":"\ud83d\udcc9 Drawdowns &amp; Recovery","text":"<ul> <li> <p><code>computeMaxDrawdown(const std::vector&lt;double&gt;&amp; cumulativeReturns)</code>   Calculates the largest peak-to-trough decline.</p> </li> <li> <p><code>computeAverageDrawdown(const std::vector&lt;double&gt;&amp; cumulativeReturns)</code>   Mean drawdown across all drawdown events.</p> </li> <li> <p><code>computeMaxRecoveryTime(const std::vector&lt;double&gt;&amp; cumulativeReturns)</code>   Longest number of periods taken to recover from a drawdown.</p> </li> </ul>"},{"location":"stats/STATS_OVERVIEW/#ratios-risk-adjusted-returns","title":"\u2696\ufe0f Ratios (Risk-Adjusted Returns)","text":"<ul> <li> <p><code>computeAlpha(asset, benchmark, riskFreeRate)</code>   Computes alpha by inferring beta internally.</p> </li> <li> <p><code>computeAlpha(portfolio, market, riskFreeRate, beta)</code>   Computes alpha with a manually supplied beta.</p> </li> <li> <p><code>computeBeta(asset, benchmark)</code>   Measures volatility relative to the market.</p> </li> <li> <p><code>computeTreynorRatio(expectedReturn, riskFreeRate, beta)</code>   Measures return per unit of systematic risk.</p> </li> <li> <p><code>computeInformationRatio(portfolioReturns, benchmarkReturns)</code>   Ratio of active return to tracking error.</p> </li> <li> <p><code>computeCalmarRatio(annualReturn, maxDrawdown)</code>   Return-to-drawdown ratio, especially useful for leveraged portfolios.</p> </li> <li> <p><code>computeSterlingRatio(averageReturn, riskFreeRate, averageDrawdown)</code>   Adjusted return metric factoring drawdowns and risk-free rate.</p> </li> <li> <p><code>computeOmegaRatio(const Returns&amp;, threshold)</code>   Measures gains relative to losses above/below a given threshold.</p> </li> </ul>"},{"location":"stats/STATS_OVERVIEW/#averages","title":"\ud83e\uddee Averages","text":"<ul> <li> <p><code>simpleMovingAverage(const std::vector&lt;double&gt;&amp;, size_t window)</code>   Computes SMA using a sliding window.</p> </li> <li> <p><code>exponentialMovingAverage(const std::vector&lt;double&gt;&amp;, size_t window)</code>   Computes EMA with exponentially decaying weights.</p> </li> </ul>"},{"location":"stats/STATS_OVERVIEW/#capture-ratios","title":"\ud83d\udcc8 Capture Ratios","text":"<ul> <li> <p><code>computeUpsideCaptureRatio(portfolioReturns, benchmarkReturns)</code>   Measures portfolio performance during positive benchmark periods.</p> </li> <li> <p><code>computeDownsideCaptureRatio(portfolioReturns, benchmarkReturns)</code>   Measures portfolio underperformance in negative benchmark periods.</p> </li> </ul>"},{"location":"stats/STATS_OVERVIEW/#distribution-metrics","title":"\ud83e\udde0 Distribution Metrics","text":"<ul> <li> <p><code>computeSkewness(const Returns&amp;)</code>   Measures asymmetry of the return distribution.</p> </li> <li> <p><code>computeKurtosis(const Returns&amp;)</code>   Measures the \"tailedness\" of the distribution; returns excess kurtosis.</p> </li> <li> <p><code>computeGainLossRatio(const Returns&amp;)</code>   Ratio of sum of gains to sum of losses.</p> </li> <li> <p><code>computeHitRatio(const Returns&amp;)</code>   Proportion of periods with positive return.</p> </li> </ul>"},{"location":"stats/STATS_OVERVIEW/#correlation-covariance","title":"\ud83d\udd17 Correlation &amp; Covariance","text":"<ul> <li> <p><code>covarianceMatrix(const std::vector&lt;PriceSeries&gt;&amp;)</code>   Computes pairwise covariance matrix from multiple assets.</p> </li> <li> <p><code>computeCorrelationMatrix(const std::vector&lt;PriceSeries&gt;&amp;)</code>   Converts covariance matrix into correlation coefficients.</p> </li> </ul>"},{"location":"stats/STATS_OVERVIEW/#utilities","title":"\ud83e\uddea Utilities","text":"<ul> <li><code>exportToCSV(const std::string&amp;, const std::vector&lt;std::string&gt;&amp;, const std::vector&lt;std::vector&lt;double&gt;&gt;&amp; data)</code>   Exports labeled tabular data to CSV format.</li> </ul>"},{"location":"stats/STATS_OVERVIEW/#notes","title":"\u2705 Notes","text":"<ul> <li>Most functions validate input and throw <code>std::invalid_argument</code> when assumptions are violated.</li> <li>Volatility functions assume simple returns, not log returns.</li> <li>Capture and ratio metrics are safe-guarded against divide-by-zero edge cases.</li> </ul> <p>For usage examples, see the <code>tests/stats/</code> folder.</p>"},{"location":"tests/TEST_OVERVIEW/","title":"\ud83e\uddea Test Coverage Overview","text":"<p>This page summarizes the scope of automated tests written for the TradeIQ platform.</p>"},{"location":"tests/TEST_OVERVIEW/#testing-framework","title":"\u2705 Testing Framework","text":"<ul> <li>Framework: Google Test (GTest)</li> <li>Coverage: All core components of <code>StatsEngine</code>, including edge cases and invalid input handling.</li> </ul>"},{"location":"tests/TEST_OVERVIEW/#test-groups","title":"\ud83d\udcc2 Test Groups","text":"Category Functions Covered \ud83d\udcc8 Returns <code>computeDailyReturns</code>, <code>computeTotalReturn</code>, <code>computeAnnualizedReturn</code> \ud83d\udcca Volatility <code>computeAnnualizedVolatility</code>, <code>computeRollingVolatility</code>, <code>computeRollingStandardDeviation</code> \u2696\ufe0f Ratios Sharpe, Sortino, Treynor, Calmar, Information, Omega, Sterling \ud83d\udcc9 Drawdowns <code>computeMaxDrawdown</code>, <code>computeAverageDrawdown</code>, <code>computeMaxRecoveryTime</code> \ud83d\udd01 Rolling Rolling Sharpe / Sortino \ud83d\udd17 Correlation Covariance &amp; correlation matrix functions \ud83d\udcca Distribution Skewness, Kurtosis, Gain/Loss Ratio, Hit Ratio \ud83d\udcc8 Capture Upside and Downside Capture Ratios \ud83e\uddf0 Utilities <code>exportToCSV</code> and internal helpers"},{"location":"tests/TEST_OVERVIEW/#notes","title":"\ud83d\udee0\ufe0f Notes","text":"<ul> <li>Edge case inputs (e.g. zero stddev, empty vectors, mismatched lengths) are tested and throw exceptions as expected.</li> <li>Tests are located under the <code>tests/stats/</code> directory and split by category.</li> <li>Future test coverage will extend to API/CLI/GUI layers as implemented.</li> </ul>"},{"location":"tests/TEST_OVERVIEW/#see-also","title":"\ud83d\udccc See Also","text":"<ul> <li>Stats Engine Overview</li> <li>GitHub: Full Test Suite</li> </ul>"},{"location":"TradeIQ/annotated/","title":"Class List","text":"<p>No classes, structs, unions or interfaces found.</p>"},{"location":"TradeIQ/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p>"},{"location":"TradeIQ/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p>"},{"location":"TradeIQ/classes/","title":"Class Index","text":""},{"location":"TradeIQ/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p>"},{"location":"TradeIQ/modules/","title":"Modules","text":"<p>No modules found.</p>"},{"location":"TradeIQ/pages/","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"TradeIQ/class_members/","title":"Class Members","text":"<p>Nothing related to Class Members found.</p>"},{"location":"TradeIQ/class_member_functions/","title":"Class Member Functions","text":"<p>Nothing related to Class Member Functions found.</p>"},{"location":"TradeIQ/class_member_variables/","title":"Class Member Variables","text":"<p>Nothing related to Class Member Variables found.</p>"},{"location":"TradeIQ/class_member_typedefs/","title":"Class Member Typedefs","text":"<p>Nothing related to Class Member Typedefs found.</p>"},{"location":"TradeIQ/class_member_enums/","title":"Class Member Enums","text":"<p>Nothing related to Class Member Enums found.</p>"},{"location":"TradeIQ/namespace_members/","title":"Namespace Members","text":"<p>Nothing related to Namespace Members found.</p>"},{"location":"TradeIQ/namespace_member_functions/","title":"Namespace Member Functions","text":"<p>Nothing related to Namespace Member Functions found.</p>"},{"location":"TradeIQ/namespace_member_variables/","title":"Namespace Member Variables","text":"<p>Nothing related to Namespace Member Variables found.</p>"},{"location":"TradeIQ/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":"<p>Nothing related to Namespace Member Typedefs found.</p>"},{"location":"TradeIQ/namespace_member_enums/","title":"Namespace Member Enums","text":"<p>Nothing related to Namespace Member Enums found.</p>"},{"location":"TradeIQ/functions/","title":"Functions","text":"<p>Nothing related to Functions found.</p>"},{"location":"TradeIQ/macros/","title":"Macros","text":"<p>Nothing related to Macros found.</p>"},{"location":"TradeIQ/variables/","title":"Variables","text":"<p>Nothing related to Variables found.</p>"},{"location":"TradeIQ/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}